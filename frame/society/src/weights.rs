// This file is part of Substrate.

// Copyright (C) 2022 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_society
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-06-28, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/substrate
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_society
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --template=./.maintain/frame-weight-template.hbs
// --output=./frame/society/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_society.
pub trait WeightInfo {
	fn bid() -> Weight;
	fn unbid() -> Weight;
	fn vouch() -> Weight;
	fn unvouch() -> Weight;
	fn vote() -> Weight;
	fn defender_vote() -> Weight;
	fn payout() -> Weight;
	fn waive_repay() -> Weight;
	fn found_society() -> Weight;
	fn dissolve() -> Weight;
	fn judge_suspended_member() -> Weight;
}

/// Weights for pallet_society using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Society Bids (r:1 w:1)
	// Storage: Society Candidates (r:1 w:0)
	// Storage: Society Members (r:1 w:0)
	// Storage: Society SuspendedMembers (r:1 w:0)
	// Storage: Society Parameters (r:1 w:0)
	fn bid() -> Weight {
		(58_665_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Society Bids (r:1 w:1)
	fn unbid() -> Weight {
		(45_171_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Society Bids (r:1 w:1)
	// Storage: Society Candidates (r:1 w:0)
	// Storage: Society Members (r:2 w:1)
	// Storage: Society SuspendedMembers (r:1 w:0)
	fn vouch() -> Weight {
		(44_905_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Society Bids (r:1 w:1)
	// Storage: Society Members (r:1 w:1)
	fn unvouch() -> Weight {
		(32_823_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Society Candidates (r:1 w:1)
	// Storage: Society Members (r:1 w:0)
	// Storage: Society Votes (r:1 w:1)
	fn vote() -> Weight {
		(41_953_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Society Defending (r:1 w:1)
	// Storage: Society Members (r:1 w:0)
	// Storage: Society ChallengeRoundCount (r:1 w:0)
	// Storage: Society DefenderVotes (r:1 w:1)
	fn defender_vote() -> Weight {
		(40_832_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Society Members (r:1 w:0)
	// Storage: Society Payouts (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn payout() -> Weight {
		(57_678_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Society Members (r:1 w:1)
	// Storage: Society Payouts (r:1 w:1)
	fn waive_repay() -> Weight {
		(37_849_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Society Head (r:1 w:1)
	// Storage: Society MemberCount (r:1 w:1)
	// Storage: Society MemberByIndex (r:0 w:1)
	// Storage: Society Founder (r:0 w:1)
	// Storage: Society Rules (r:0 w:1)
	// Storage: Society Members (r:0 w:1)
	// Storage: Society Parameters (r:0 w:1)
	fn found_society() -> Weight {
		(37_564_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: Society Founder (r:1 w:1)
	// Storage: Society MemberCount (r:1 w:1)
	// Storage: Society Head (r:0 w:1)
	// Storage: Society MemberByIndex (r:0 w:1)
	// Storage: Society Rules (r:0 w:1)
	// Storage: Society Members (r:0 w:1)
	fn dissolve() -> Weight {
		(51_634_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: Society Founder (r:1 w:0)
	// Storage: Society SuspendedMembers (r:1 w:1)
	// Storage: Society Payouts (r:1 w:0)
	// Storage: Society Pot (r:1 w:1)
	fn judge_suspended_member() -> Weight {
		(39_527_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Society Bids (r:1 w:1)
	// Storage: Society Candidates (r:1 w:0)
	// Storage: Society Members (r:1 w:0)
	// Storage: Society SuspendedMembers (r:1 w:0)
	// Storage: Society Parameters (r:1 w:0)
	fn bid() -> Weight {
		(58_665_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Society Bids (r:1 w:1)
	fn unbid() -> Weight {
		(45_171_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Society Bids (r:1 w:1)
	// Storage: Society Candidates (r:1 w:0)
	// Storage: Society Members (r:2 w:1)
	// Storage: Society SuspendedMembers (r:1 w:0)
	fn vouch() -> Weight {
		(44_905_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Society Bids (r:1 w:1)
	// Storage: Society Members (r:1 w:1)
	fn unvouch() -> Weight {
		(32_823_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Society Candidates (r:1 w:1)
	// Storage: Society Members (r:1 w:0)
	// Storage: Society Votes (r:1 w:1)
	fn vote() -> Weight {
		(41_953_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Society Defending (r:1 w:1)
	// Storage: Society Members (r:1 w:0)
	// Storage: Society ChallengeRoundCount (r:1 w:0)
	// Storage: Society DefenderVotes (r:1 w:1)
	fn defender_vote() -> Weight {
		(40_832_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Society Members (r:1 w:0)
	// Storage: Society Payouts (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	fn payout() -> Weight {
		(57_678_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Society Members (r:1 w:1)
	// Storage: Society Payouts (r:1 w:1)
	fn waive_repay() -> Weight {
		(37_849_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Society Head (r:1 w:1)
	// Storage: Society MemberCount (r:1 w:1)
	// Storage: Society MemberByIndex (r:0 w:1)
	// Storage: Society Founder (r:0 w:1)
	// Storage: Society Rules (r:0 w:1)
	// Storage: Society Members (r:0 w:1)
	// Storage: Society Parameters (r:0 w:1)
	fn found_society() -> Weight {
		(37_564_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	// Storage: Society Founder (r:1 w:1)
	// Storage: Society MemberCount (r:1 w:1)
	// Storage: Society Head (r:0 w:1)
	// Storage: Society MemberByIndex (r:0 w:1)
	// Storage: Society Rules (r:0 w:1)
	// Storage: Society Members (r:0 w:1)
	fn dissolve() -> Weight {
		(51_634_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: Society Founder (r:1 w:0)
	// Storage: Society SuspendedMembers (r:1 w:1)
	// Storage: Society Payouts (r:1 w:0)
	// Storage: Society Pot (r:1 w:1)
	fn judge_suspended_member() -> Weight {
		(39_527_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
}
